#!/usr/bin/env ruby

require 'uri'

preprocess do
    $categories = Hash.new { |map, key| map[key] = {} }
    $tags       = Hash.new { |map, key| map[key] = {} }

    # process static assets
    @items.find_all('/notes/**/assets/**/*').each do |item|
        match  = item.identifier.to_s.match(/^\/notes\/(.*)\/assets\/(.*)$/)
        number = match[1].split('/').map { |s| s.match(/^(\d+)-(.*)$/)[1] }
        item[:url] = "/#{number.join('/')}/assets/#{match[2]}"
    end

    # process markdown notes
    @items.find_all('/notes/**/*.md').each do |item|
        match  = item.identifier.to_s.match(/^\/notes\/(.*)\.md$/)
        number = match[1].split('/').map { |s| s.match(/^(\d+)-(.*)$/)[1] }
        titles = match[1].split('/').map { |s| s.match(/^(\d+)-(.*)$/)[2] }
        item[:url]        = "/#{number.join('/')}_#{item[:permalink]}.html"
        item[:title]      = titles[-1]
        item[:categories] = titles[0..-2]
        item[:tags].each { |t| $tags[t.downcase].store(item[:title], item[:url]) }
    end

    $tags.each do |k,v|
        @items.create('', { :title => k, :notes => v }, "/tag/#{k}.html")
    end
end

compile '/notes/**/*.md' do
    # folder = item.identifier.to_s.match(/^\/notes\/(.*)\.md$/)[1].split('/')
    # title  = folder[-1].match(/^(\d+)-(.*)$/)[2]
    # number = folder.map { |s| s.match(/^(\d+)-(.*)$/)[1] }
    filter :pandoc, from: 'markdown', to: 'html5', args: ['mathjax']
    layout '/note.*' #, locals: { title: title }
    layout '/base.*' #, locals: { title: title, aside: 'fake-TOC' }
    # write "/#{number.join('/')}_#{item[:permalink]}.html"
    write item[:url]
end

compile '/*.html' do
    filter :erb
    layout '/page.*'
    layout '/base.*'#, locals: { title: @config[:title], aside: '编程归档\n标签' }
    write item.identifier.without_ext + ".html"
end

compile '/tag/*' do
    layout '/tag.*'
    layout "/page.*"
    layout '/base.*'#, locals: { title: item[:tag], aside: '编程归档\n标签' }
    write item.identifier
end

compile '/notes/**/assets/**/*' do
    match  = item.identifier.to_s.match(/^\/notes\/(.*)\/assets\/(.*)$/)
    number = match[1].split('/').map { |s| s.match(/^(\d+)-(.*)$/)[1] }
    write "/#{number.join('/')}/assets/#{match[2]}"
end

ignore '/**/_*.scss'

compile '/**/*.scss' do
    filter :sass, syntax: :scss, style: :compressed
    write @item.identifier.without_ext + '.css'
end

compile '/**/*' do
    write item.identifier.to_s
end

layout '/**/*', :erb
